 package mxdev.common.commlog;
 
 import java.rmi.RemoteException;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import psdi.mbo.Mbo;
 import psdi.mbo.MboRemote;
 import psdi.mbo.MboSetInfo;
 import psdi.mbo.MboSetRemote;
 import psdi.mbo.MboValue;
 import psdi.mbo.MboValueInfo;
 import psdi.server.MXServer;
 import psdi.server.MaxPropCache;
 import psdi.util.HTML;
 import psdi.util.MXException;
 import psdi.util.logging.MXLogger;
 import psdi.util.logging.MXLoggerFactory;
 
 public class FldCommLogTmpltId extends psdi.common.commlog.FldCommLogTmpltId
 {
   private static MXLogger logger = MXLoggerFactory.getLogger("maximo.omninecs");
 
   public FldCommLogTmpltId(MboValue mbv) throws MXException
   {
     super(mbv);
   }
 
   public void action() throws MXException, RemoteException
   {
     logger.debug("Entering omninecs.common.commlog.FldCommLogTmpltId.action method");
 
     super.action();
 
     MboRemote mbo = getMboValue().getMbo();
     String message = mbo.getString("message");
     message = searchCustomField(message);
     mbo.setValue("message", message, 2L);
   }
 
   private String searchCustomField(String message)
     throws RemoteException, MXException
   {
     MaxPropCache properties = (MaxPropCache)MXServer.getMXServer().getFromMaximoCache("MAXPROP");
     String custChar1 = properties.getProperty("omninecs.commtmpl.texttable.tag");
     String custChar2 = properties.getProperty("omninecs.commtmpl.htmltable.tag");
 
     Pattern p = Pattern.compile(custChar1 + ":(\\w*[.\\w]*)");
     Matcher m = p.matcher(message);
 
     StringBuffer result = new StringBuffer();
     while (m.find())
     {
       logger.debug("Found string " + m.group());
       String valueField = searchValue(m.group(1), 1);
       m.appendReplacement(result, valueField);
     }
     m.appendTail(result);
     String parsmessage1 = result.toString();
 
     p = Pattern.compile(custChar2 + ":(\\w*[.\\w]*)");
     m = p.matcher(parsmessage1);
 
     result.setLength(0);
 
     while (m.find())
     {
       logger.debug("Found string " + m.group());
       String valueField = searchValue(m.group(1), 2);
 
       m.appendReplacement(result, Matcher.quoteReplacement(valueField));
     }
 
     m.appendTail(result);
 
     String ret = result.toString();
     logger.debug("ret=" + ret);
 
     return ret;
   }
 
   private String searchValue(String value, int charcase)
     throws RemoteException, MXException
   {
     String[] output = value.split("\\.");
 
     logger.debug("output: " + output.toString());
 
     String resultString = "";
 
     if (charcase == 1)
     {
       resultString = makeQueryString(output);
     }
     else if (charcase == 2)
     {
       resultString = makeQueryTable(output);
     }
 
     return resultString;
   }
 
   private String makeQueryTable(String[] queryData)
     throws RemoteException, MXException
   {
     MboRemote owner = getMboValue().getMbo().getOwner();
     String mboName = owner.getName();
     MboSetRemote relationshipMboSet = owner.getMboSet(queryData[0]);
     logger.debug(relationshipMboSet.getName() + " related to " + mboName);
 
     MaxPropCache properties = (MaxPropCache)MXServer.getMXServer().getFromMaximoCache("MAXPROP");
     String tbstyle = properties.getProperty("omninecs.commtmpl.htmltable.tbstyle");
     String trstyle = properties.getProperty("omninecs.commtmpl.htmltable.trstyle");
     String thstyle = properties.getProperty("omninecs.commtmpl.htmltable.thstyle");
     String tdstyle = properties.getProperty("omninecs.commtmpl.htmltable.tdstyle");
 
     String resultsQuery = "";
 
     resultsQuery = resultsQuery + "<table " + tbstyle + ">\n";
 
     resultsQuery = resultsQuery + "<tr " + trstyle + ">\n";
 
     MboSetInfo mboSetInfo = relationshipMboSet.getMboSetInfo();
     for (int v = 1; v < queryData.length; v++)
     {
       String fieldDesc = mboSetInfo.getAttribute(queryData[v]).getTitle();
       resultsQuery = resultsQuery + "<th " + thstyle + ">" + fieldDesc + "</th>\n";
     }
     resultsQuery = resultsQuery + "</tr>\n";
 
     if (relationshipMboSet.isEmpty()) {
       logger.debug("Empty set for relationship");
     }
     MboRemote relationshipMbo = relationshipMboSet.moveFirst();
     while (relationshipMbo != null)
     {
       resultsQuery = resultsQuery + "<tr " + trstyle + ">";
       for (int v = 1; v < queryData.length; v++)
       {
         String val = HTML.encode(relationshipMbo.getString(queryData[v]));
 
         if (!val.endsWith("<!-- RICH TEXT -->"))
           val = val.replace("\n", "<br>");
         resultsQuery = resultsQuery + "<td " + tdstyle + ">" + val + "</td>\n";
       }
       resultsQuery = resultsQuery + "</tr>\n";
       relationshipMbo = relationshipMboSet.moveNext();
     }
 
     resultsQuery = resultsQuery + "</table>\n";
     logger.debug(resultsQuery);
 
     return resultsQuery;
   }
 
   private String makeQueryString(String[] queryData)
     throws RemoteException, MXException
   {
     MboRemote owner = getMboValue().getMbo().getOwner();
     String mboName = owner.getName();
     MboSetRemote relationshipMboSet = owner.getMboSet(queryData[0]);
     logger.debug(relationshipMboSet.getName() + " related to " + mboName);
 
     String resultsQuery = "";
 
     MboRemote relationshipMbo = relationshipMboSet.moveFirst();
     while (relationshipMbo != null)
     {
       for (int v = 1; v < queryData.length; v++)
       {
         resultsQuery = resultsQuery + queryData[v] + ": " + relationshipMbo.getString(queryData[v]);
         if (v != queryData.length - 1)
         {
           resultsQuery = resultsQuery + ", ";
         }
       }
       relationshipMbo = relationshipMboSet.moveNext();
       if (relationshipMbo == null)
         resultsQuery = resultsQuery + ".\n";
       else {
         resultsQuery = resultsQuery + ";\n";
       }
     }
     logger.debug(resultsQuery);
 
     return resultsQuery;
   }
 }
